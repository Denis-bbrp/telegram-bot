from aiogram import Bot, Dispatcher, types, executor
from google_api import get_all_users, is_payment_today
import aiocron
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from datetime import datetime

from config import BOT_TOKEN, ADMIN_GROUP_ID
from google_api import get_user_info, add_user

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class RegisterUser(StatesGroup):
    waiting_for_name = State()
    waiting_for_car = State()

# –°—Ç–∞—Ä—Ç –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=['start', 'help'])
async def greet_user(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton("üîê –Ø –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä"),
        KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    )
    keyboard.add(
        KeyboardButton("üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫"),
        KeyboardButton("üì∑ –§–û–¢–û –ê–í–¢–û")
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –∞—Ä–µ–Ω–¥–µ –∞–≤—Ç–æ üöó\n\n–Ø –º–æ–≥—É:\n"
        "‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        "‚Äî –ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É (—á–µ–∫)\n"
        "‚Äî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø–ª–∞—Ç–µ–∂–µ\n"
        "‚Äî –ü—Ä–∏–Ω—è—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç –ø–æ –∞–≤—Ç–æ\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å üëá",
        reply_markup=keyboard
    )

# –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message_handler(lambda message: message.text == "üîê –Ø –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä")
async def start_registration(message: types.Message, state: FSMContext):
    telegram_id = str(message.from_user.id)
    info = get_user_info(telegram_id)

    if info:
        await message.answer(f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {info['name']}, –Ω–æ–º–µ—Ä –∞–≤—Ç–æ: {info['car']}")
        return

    await state.set_state(RegisterUser.waiting_for_name)
    await state.update_data(telegram_id=telegram_id)
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")

# –í–≤–æ–¥ –∏–º–µ–Ω–∏
@dp.message_handler(state=RegisterUser.waiting_for_name, content_types=types.ContentTypes.TEXT)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(RegisterUser.waiting_for_car)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≥–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–ì–†–ó):")

# –í–≤–æ–¥ –ì–†–ó
@dp.message_handler(state=RegisterUser.waiting_for_car, content_types=types.ContentTypes.TEXT)
async def process_car(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    name = user_data.get("name")
    car = message.text
    telegram_id = user_data.get("telegram_id")

    add_user(telegram_id, name, car)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä –º–∞—à–∏–Ω—ã {car}.")
    await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ /–ø—Ä–æ—Ñ–∏–ª—å
from google_api import get_user_info, is_payment_today

@dp.message_handler(commands=['–ø—Ä–æ—Ñ–∏–ª—å'])
async def show_profile(message: types.Message):
    user_id = str(message.from_user.id)
    info = get_user_info(user_id)

    if info:
        payment_today = is_payment_today(user_id)
        payment_status = "‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–µ–Ω–∞" if payment_today else "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        await message.answer(
            f"üë§ –ò–º—è: {info['name']}\n"
            f"üöó –ì–æ—Å–Ω–æ–º–µ—Ä: {info['car']}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {info['status']}\n"
            f"üí∏ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {info['debt']} ‚ÇΩ\n"
            f"{payment_status}"
        )
    else:
        await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")

# –ü—Ä–∏—ë–º —á–µ–∫–æ–≤ (—Ñ–æ—Ç–æ)
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def receive_photo(message: types.Message):
    user_id = str(message.from_user.id)
    info = get_user_info(user_id)

    if not info:
        await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    caption = (
        f"üì∑ –§–æ—Ç–æ –∞–≤—Ç–æ –æ—Ç {info['name']} ({info['car']})\n"
        f"Telegram ID: {user_id}\n"
        f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )

    await bot.send_photo(chat_id=ADMIN_GROUP_ID, photo=message.photo[-1].file_id, caption=caption)
    await message.answer("–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ. –°–ø–∞—Å–∏–±–æ!")

@dp.message_handler(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile_button(message: types.Message):
    from google_api import get_user_info, is_payment_today

    user_id = str(message.from_user.id)
    info = get_user_info(user_id)

    if info:
        payment_today = is_payment_today(user_id)
        payment_status = "‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–µ–Ω–∞" if payment_today else "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        await message.answer(
            f"üë§ –ò–º—è: {info['name']}\n"
            f"üöó –ì–æ—Å–Ω–æ–º–µ—Ä: {info['car']}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {info['status']}\n"
            f"üí∏ –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {info['debt']} ‚ÇΩ\n"
            f"{payment_status}"
        )
    else:
        await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")

@dp.message_handler(lambda message: message.text == "üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫")
async def send_check_info(message: types.Message):
    await message.answer(
        "üì∏ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ (—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞).\n\n"
        "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É—é –æ–ø–ª–∞—Ç—É. "
        "–ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º –∏ —Å –≤–∏–¥–∏–º–æ–π —Å—É–º–º–æ–π. –°–ø–∞—Å–∏–±–æ!"
    )

@dp.message_handler(lambda message: message.text == "üì∑ –§–û–¢–û –ê–í–¢–û")
async def request_car_photos(message: types.Message):
    await message.answer(
        "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ 5 —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n"
        "1. –°–ø—Ä–∞–≤–∞\n2. –°–ª–µ–≤–∞\n3. –°–ø–µ—Ä–µ–¥–∏\n4. –°–∑–∞–¥–∏\n5. –°–ø–∏–¥–æ–º–µ—Ç—Ä\n\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å—ë –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."
    )

# –§—É–Ω–∫—Ü–∏—è: –±–æ—Ç —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏
async def notify_users_about_debt():
    users = get_all_users()
    if not users:
        return

    for user in users:
        user_id = str(user.get("ID"))
        name = user.get("–ò–º—è")
        car = user.get("–ì–†–ó")

        if not is_payment_today(user_id):
            try:
                await bot.send_message(
                    user_id,
                    f"‚ùó –ü—Ä–∏–≤–µ—Ç, {name}!\n\n–¢—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –∞—Ä–µ–Ω–¥—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
                    f"üöó –ì–æ—Å–Ω–æ–º–µ—Ä: {car}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —á–µ–∫ –¥–æ –ø–æ–ª—É–Ω–æ—á–∏. –°–ø–∞—Å–∏–±–æ!"
                )
            except Exception as e:
                print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}] {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00
@aiocron.crontab('0 23 * * *')
async def scheduled_reminder():
    await notify_users_about_debt()

# –ö–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏ –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º –≤ 13:00
@aiocron.crontab('0 13 */14 * 5')
async def remind_photo_report():
    users = get_all_users()
    for user in users:
        user_id = str(user.get("ID"))
        name = user.get("–ò–º—è")

        if not user_id:
            continue

        try:
            await bot.send_message(
                user_id,
                f"üì∑ –ü—Ä–∏–≤–µ—Ç, {name}!\n\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ—Ä–∞ –ø—Ä–∏—Å–ª–∞—Ç—å —Å–≤–µ–∂–∏–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n"
                "1. –°–ø—Ä–∞–≤–∞\n2. –°–ª–µ–≤–∞\n3. –°–ø–µ—Ä–µ–¥–∏\n4. –°–∑–∞–¥–∏\n5. –°–ø–∏–¥–æ–º–µ—Ç—Ä\n\n"
                "–ñ–¥—ë–º —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç üôå"
            )
        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_id}] {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
